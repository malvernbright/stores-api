{
    "sourceFile": "controllers/stocksController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 75,
            "patches": [
                {
                    "date": 1641107897960,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1641107929739,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n \n module.exports.stocks_get_by_id = (req, res) => {\n     Product.findById({ _id: req.params.id }).then((product) => {\n         res.status(200).json({ product });\n-        console.log(product);\n+        console.log(product.quantityStocked);\n     });\n }\n \n module.exports.stocks_post = async(req, res) => {\n"
                },
                {
                    "date": 1641107956694,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n \n module.exports.stocks_get_by_id = (req, res) => {\n     Product.findById({ _id: req.params.id }).then((product) => {\n         res.status(200).json({ product });\n-        console.log(product.quantityStocked);\n+        console.log(typeof product.quantityStocked);\n     });\n }\n \n module.exports.stocks_post = async(req, res) => {\n"
                },
                {
                    "date": 1641107987343,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n \n module.exports.stocks_get_by_id = (req, res) => {\n     Product.findById({ _id: req.params.id }).then((product) => {\n         res.status(200).json({ product });\n-        console.log(typeof product.quantityStocked);\n+        console.log(product.quantityStocked - product.quantityBought);\n     });\n }\n \n module.exports.stocks_post = async(req, res) => {\n"
                },
                {
                    "date": 1641108019967,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n \n module.exports.stocks_get_by_id = (req, res) => {\n     Product.findById({ _id: req.params.id }).then((product) => {\n         res.status(200).json({ product });\n-        console.log(product.quantityStocked - product.quantityBought);\n+        console.log(product.quantityStocked - product.quantityLeft);\n     });\n }\n \n module.exports.stocks_post = async(req, res) => {\n"
                },
                {
                    "date": 1641108051934,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n \n module.exports.stocks_get_by_id = (req, res) => {\n     Product.findById({ _id: req.params.id }).then((product) => {\n         res.status(200).json({ product });\n-        console.log(product.quantityStocked - product.quantityLeft);\n+        console.log(product.quantityStocked - 34.9);\n     });\n }\n \n module.exports.stocks_post = async(req, res) => {\n"
                },
                {
                    "date": 1641108295431,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,27 +29,30 @@\n }\n \n module.exports.stock_update = async(req, res) => {\n     const { quantityBought, quantityLeft } = req.body;\n-    // if (quantityBought < req.body.quantityStocked) {\n+    Product.findById({ _id: req.params.id }).then((product) => {\n+        // res.status(200).json({ product });\n+        // console.log(product.quantityStocked - 34.9);\n+        try {\n+            await product.updateOne({ _id: req.params.id }, {\n+                quantityBought: quantityBought,\n+                quantityLeft: product.quantityStocked - quantityBought,\n+                dateModified: Date.now()\n+            }).then(() => {\n+                Product.findOne({ _id: req.params.id }).then((product) => {\n+                    res.status(200).json({ product });\n+                });\n+            });\n \n-    // }\n+        } catch (error) {\n+            res.status(400).json({ error: error });\n+        }\n+    });\n+\n     const qtyStocked = Product.findById({ _id: req.params.id });\n     let total = qtyStocked.quantityStocked - qtyStocked.quantityBought;\n-    try {\n-        await Product.updateOne({ _id: req.params.id }, {\n-            quantityBought: quantityBought,\n-            quantityLeft: total,\n-            dateModified: Date.now()\n-        }).then(() => {\n-            Product.findOne({ _id: req.params.id }).then((product) => {\n-                res.status(200).json({ product });\n-            });\n-        });\n \n-    } catch (error) {\n-        res.status(400).json({ error: error });\n-    }\n }\n \n module.exports.stock_delete = async(req, res) => {\n     try {\n"
                },
                {
                    "date": 1641108323143,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n }\n \n module.exports.stock_update = async(req, res) => {\n     const { quantityBought, quantityLeft } = req.body;\n-    Product.findById({ _id: req.params.id }).then((product) => {\n+    Product.findById({ _id: req.params.id }).then(async(product) => {\n         // res.status(200).json({ product });\n         // console.log(product.quantityStocked - 34.9);\n         try {\n             await product.updateOne({ _id: req.params.id }, {\n"
                },
                {
                    "date": 1641108338442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n         res.status(400).json({ error });\n     }\n }\n \n-module.exports.stock_update = async(req, res) => {\n+module.exports.stock_update = (req, res) => {\n     const { quantityBought, quantityLeft } = req.body;\n     Product.findById({ _id: req.params.id }).then(async(product) => {\n         // res.status(200).json({ product });\n         // console.log(product.quantityStocked - 34.9);\n"
                },
                {
                    "date": 1641108454989,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,15 +28,16 @@\n     }\n }\n \n module.exports.stock_update = (req, res) => {\n-    const { quantityBought, quantityLeft } = req.body;\n+\n     Product.findById({ _id: req.params.id }).then(async(product) => {\n+        const { quantityBought, quantityLeft } = req.body;\n         // res.status(200).json({ product });\n         // console.log(product.quantityStocked - 34.9);\n         try {\n-            await product.updateOne({ _id: req.params.id }, {\n-                quantityBought: quantityBought,\n+            await Product.updateOne({ _id: req.params.id }, {\n+                quantityBought,\n                 quantityLeft: product.quantityStocked - quantityBought,\n                 dateModified: Date.now()\n             }).then(() => {\n                 Product.findOne({ _id: req.params.id }).then((product) => {\n"
                },
                {
                    "date": 1641108536488,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n         // console.log(product.quantityStocked - 34.9);\n         try {\n             await Product.updateOne({ _id: req.params.id }, {\n                 quantityBought,\n-                quantityLeft: product.quantityStocked - quantityBought,\n+                quantityLeft: product.quantityLeft - quantityBought,\n                 dateModified: Date.now()\n             }).then(() => {\n                 Product.findOne({ _id: req.params.id }).then((product) => {\n                     res.status(200).json({ product });\n"
                },
                {
                    "date": 1641108614369,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n         // res.status(200).json({ product });\n         // console.log(product.quantityStocked - 34.9);\n         try {\n             await Product.updateOne({ _id: req.params.id }, {\n-                quantityBought,\n+                quantityBought: product.quantityBought + quantityBought,\n                 quantityLeft: product.quantityLeft - quantityBought,\n                 dateModified: Date.now()\n             }).then(() => {\n                 Product.findOne({ _id: req.params.id }).then((product) => {\n"
                },
                {
                    "date": 1641108770437,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,23 +31,25 @@\n module.exports.stock_update = (req, res) => {\n \n     Product.findById({ _id: req.params.id }).then(async(product) => {\n         const { quantityBought, quantityLeft } = req.body;\n-        // res.status(200).json({ product });\n-        // console.log(product.quantityStocked - 34.9);\n-        try {\n-            await Product.updateOne({ _id: req.params.id }, {\n-                quantityBought: product.quantityBought + quantityBought,\n-                quantityLeft: product.quantityLeft - quantityBought,\n-                dateModified: Date.now()\n-            }).then(() => {\n-                Product.findOne({ _id: req.params.id }).then((product) => {\n-                    res.status(200).json({ product });\n+        if (product.quantityLeft === 0) {\n+\n+        } else {\n+            try {\n+                await Product.updateOne({ _id: req.params.id }, {\n+                    quantityBought: product.quantityBought + quantityBought,\n+                    quantityLeft: product.quantityLeft - quantityBought,\n+                    dateModified: Date.now()\n+                }).then(() => {\n+                    Product.findOne({ _id: req.params.id }).then((product) => {\n+                        res.status(200).json({ product });\n+                    });\n                 });\n-            });\n \n-        } catch (error) {\n-            res.status(400).json({ error: error });\n+            } catch (error) {\n+                res.status(400).json({ error: error });\n+            }\n         }\n     });\n \n     const qtyStocked = Product.findById({ _id: req.params.id });\n"
                },
                {
                    "date": 1641108868293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,32 @@\n const Product = require('../models/Product');\n \n-function calculateLeft(stocked, bought) {\n-    return (stocked - bought);\n+// Handle errors\n+const handleErrors = (err) => {\n+    console.log(err.message, err.code);\n+    let errors = { productLeft: '' };\n+\n+    // Duplicate error code\n+    if (err.code === 11000) {\n+        errors.email = 'that email is already in use';\n+        return errors;\n+    }\n+\n+    if (err.message === 'incorrect email') {\n+        errors.email = 'that email is not registered';\n+    }\n+\n+    if (err.message === 'incorrect password') {\n+        errors.password = 'that password is incorrect';\n+    }\n+\n+    // Validation errors\n+    if (err.message.includes('user validation failed')) {\n+        Object.values(err.errors).forEach(({ properties }) => {\n+            errors[properties.path] = properties.message;\n+        });\n+    }\n+    return errors;\n }\n \n \n module.exports.stocks_get = (req, res) => {\n"
                },
                {
                    "date": 1641108973356,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n \n     Product.findById({ _id: req.params.id }).then(async(product) => {\n         const { quantityBought, quantityLeft } = req.body;\n         if (product.quantityLeft === 0) {\n-\n+            console.error('Cannot sell, products have been depleted');\n         } else {\n             try {\n                 await Product.updateOne({ _id: req.params.id }, {\n                     quantityBought: product.quantityBought + quantityBought,\n"
                },
                {
                    "date": 1641109029968,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,8 +57,9 @@\n     Product.findById({ _id: req.params.id }).then(async(product) => {\n         const { quantityBought, quantityLeft } = req.body;\n         if (product.quantityLeft === 0) {\n             console.error('Cannot sell, products have been depleted');\n+            res.status(404).json({ error: 'Cannot sell, products have been depleted' });\n         } else {\n             try {\n                 await Product.updateOne({ _id: req.params.id }, {\n                     quantityBought: product.quantityBought + quantityBought,\n"
                },
                {
                    "date": 1641109087080,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,9 @@\n     Product.findById({ _id: req.params.id }).then(async(product) => {\n         const { quantityBought, quantityLeft } = req.body;\n         if (product.quantityLeft === 0) {\n             console.error('Cannot sell, products have been depleted');\n-            res.status(404).json({ error: 'Cannot sell, products have been depleted' });\n+            res.status(401).json({ error: 'Cannot sell, products have been depleted' });\n         } else {\n             try {\n                 await Product.updateOne({ _id: req.params.id }, {\n                     quantityBought: product.quantityBought + quantityBought,\n"
                },
                {
                    "date": 1641109118681,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,8 @@\n \n     Product.findById({ _id: req.params.id }).then(async(product) => {\n         const { quantityBought, quantityLeft } = req.body;\n         if (product.quantityLeft === 0) {\n-            console.error('Cannot sell, products have been depleted');\n             res.status(401).json({ error: 'Cannot sell, products have been depleted' });\n         } else {\n             try {\n                 await Product.updateOne({ _id: req.params.id }, {\n"
                },
                {
                    "date": 1641109235900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,7 +85,7 @@\n     try {\n         const product = await Product.deleteOne({ _id: req.params.id });\n         res.status(202).json({ product: product.name });\n     } catch (error) {\n-\n+        res.status(500).json({ error: error.message });\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1641109252361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,8 +57,14 @@\n     Product.findById({ _id: req.params.id }).then(async(product) => {\n         const { quantityBought, quantityLeft } = req.body;\n         if (product.quantityLeft === 0) {\n             res.status(401).json({ error: 'Cannot sell, products have been depleted' });\n+            try {\n+                const product = await Product.deleteOne({ _id: req.params.id });\n+                res.status(202).json({ product: product.name });\n+            } catch (error) {\n+                res.status(500).json({ error: error.message });\n+            }\n         } else {\n             try {\n                 await Product.updateOne({ _id: req.params.id }, {\n                     quantityBought: product.quantityBought + quantityBought,\n"
                },
                {
                    "date": 1641109301640,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,14 +57,10 @@\n     Product.findById({ _id: req.params.id }).then(async(product) => {\n         const { quantityBought, quantityLeft } = req.body;\n         if (product.quantityLeft === 0) {\n             res.status(401).json({ error: 'Cannot sell, products have been depleted' });\n-            try {\n-                const product = await Product.deleteOne({ _id: req.params.id });\n-                res.status(202).json({ product: product.name });\n-            } catch (error) {\n-                res.status(500).json({ error: error.message });\n-            }\n+            Product.deleteOne({ _id: req.params.id });\n+            res.status(202).json({ product: product.name });\n         } else {\n             try {\n                 await Product.updateOne({ _id: req.params.id }, {\n                     quantityBought: product.quantityBought + quantityBought,\n"
                },
                {
                    "date": 1641109451381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,8 @@\n         const { quantityBought, quantityLeft } = req.body;\n         if (product.quantityLeft === 0) {\n             res.status(401).json({ error: 'Cannot sell, products have been depleted' });\n             Product.deleteOne({ _id: req.params.id });\n-            res.status(202).json({ product: product.name });\n         } else {\n             try {\n                 await Product.updateOne({ _id: req.params.id }, {\n                     quantityBought: product.quantityBought + quantityBought,\n"
                },
                {
                    "date": 1641109573035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,13 +54,14 @@\n \n module.exports.stock_update = (req, res) => {\n \n     Product.findById({ _id: req.params.id }).then(async(product) => {\n-        const { quantityBought, quantityLeft } = req.body;\n+\n         if (product.quantityLeft === 0) {\n             res.status(401).json({ error: 'Cannot sell, products have been depleted' });\n             Product.deleteOne({ _id: req.params.id });\n         } else {\n+            const { quantityBought, quantityLeft } = req.body;\n             try {\n                 await Product.updateOne({ _id: req.params.id }, {\n                     quantityBought: product.quantityBought + quantityBought,\n                     quantityLeft: product.quantityLeft - quantityBought,\n"
                },
                {
                    "date": 1641109645384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n \n module.exports.stock_update = (req, res) => {\n \n     Product.findById({ _id: req.params.id }).then(async(product) => {\n-\n+        product = Product.findById({ _id: req.params.id });\n         if (product.quantityLeft === 0) {\n             res.status(401).json({ error: 'Cannot sell, products have been depleted' });\n             Product.deleteOne({ _id: req.params.id });\n         } else {\n"
                },
                {
                    "date": 1641109666390,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,14 +54,12 @@\n \n module.exports.stock_update = (req, res) => {\n \n     Product.findById({ _id: req.params.id }).then(async(product) => {\n-        product = Product.findById({ _id: req.params.id });\n+        const { quantityBought, quantityLeft } = req.body;\n         if (product.quantityLeft === 0) {\n             res.status(401).json({ error: 'Cannot sell, products have been depleted' });\n-            Product.deleteOne({ _id: req.params.id });\n         } else {\n-            const { quantityBought, quantityLeft } = req.body;\n             try {\n                 await Product.updateOne({ _id: req.params.id }, {\n                     quantityBought: product.quantityBought + quantityBought,\n                     quantityLeft: product.quantityLeft - quantityBought,\n"
                },
                {
                    "date": 1641109702242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n \n     Product.findById({ _id: req.params.id }).then(async(product) => {\n         const { quantityBought, quantityLeft } = req.body;\n         if (product.quantityLeft === 0) {\n-            res.status(401).json({ error: 'Cannot sell, products have been depleted' });\n+            console.error('Cannot sell, products have been depleted');\n         } else {\n             try {\n                 await Product.updateOne({ _id: req.params.id }, {\n                     quantityBought: product.quantityBought + quantityBought,\n@@ -85,7 +85,7 @@\n     try {\n         const product = await Product.deleteOne({ _id: req.params.id });\n         res.status(202).json({ product: product.name });\n     } catch (error) {\n-        res.status(500).json({ error: error.message });\n+\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1641109722365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n }\n \n module.exports.stock_update = (req, res) => {\n \n-    Product.findById({ _id: req.params.id }).then(async(product) => {\n+    const product = Product.findById({ _id: req.params.id }).then(async(product) => {\n         const { quantityBought, quantityLeft } = req.body;\n         if (product.quantityLeft === 0) {\n             console.error('Cannot sell, products have been depleted');\n         } else {\n"
                },
                {
                    "date": 1641109737556,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n }\n \n module.exports.stock_update = (req, res) => {\n \n-    const product = Product.findById({ _id: req.params.id }).then(async(product) => {\n+    Product.findById({ _id: req.params.id }).then(async(product) => {\n         const { quantityBought, quantityLeft } = req.body;\n         if (product.quantityLeft === 0) {\n             console.error('Cannot sell, products have been depleted');\n         } else {\n"
                },
                {
                    "date": 1641109758173,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,26 +55,24 @@\n module.exports.stock_update = (req, res) => {\n \n     Product.findById({ _id: req.params.id }).then(async(product) => {\n         const { quantityBought, quantityLeft } = req.body;\n-        if (product.quantityLeft === 0) {\n-            console.error('Cannot sell, products have been depleted');\n-        } else {\n-            try {\n-                await Product.updateOne({ _id: req.params.id }, {\n-                    quantityBought: product.quantityBought + quantityBought,\n-                    quantityLeft: product.quantityLeft - quantityBought,\n-                    dateModified: Date.now()\n-                }).then(() => {\n-                    Product.findOne({ _id: req.params.id }).then((product) => {\n-                        res.status(200).json({ product });\n-                    });\n+\n+        try {\n+            await Product.updateOne({ _id: req.params.id }, {\n+                quantityBought: product.quantityBought + quantityBought,\n+                quantityLeft: product.quantityLeft - quantityBought,\n+                dateModified: Date.now()\n+            }).then(() => {\n+                Product.findOne({ _id: req.params.id }).then((product) => {\n+                    res.status(200).json({ product });\n                 });\n+            });\n \n-            } catch (error) {\n-                res.status(400).json({ error: error });\n-            }\n+        } catch (error) {\n+            res.status(400).json({ error: error });\n         }\n+\n     });\n \n     const qtyStocked = Product.findById({ _id: req.params.id });\n     let total = qtyStocked.quantityStocked - qtyStocked.quantityBought;\n"
                },
                {
                    "date": 1641109765041,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,8 @@\n module.exports.stock_update = (req, res) => {\n \n     Product.findById({ _id: req.params.id }).then(async(product) => {\n         const { quantityBought, quantityLeft } = req.body;\n-\n         try {\n             await Product.updateOne({ _id: req.params.id }, {\n                 quantityBought: product.quantityBought + quantityBought,\n                 quantityLeft: product.quantityLeft - quantityBought,\n@@ -70,9 +69,8 @@\n \n         } catch (error) {\n             res.status(400).json({ error: error });\n         }\n-\n     });\n \n     const qtyStocked = Product.findById({ _id: req.params.id });\n     let total = qtyStocked.quantityStocked - qtyStocked.quantityBought;\n"
                },
                {
                    "date": 1641109837918,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,13 +52,13 @@\n     }\n }\n \n module.exports.stock_update = (req, res) => {\n-\n     Product.findById({ _id: req.params.id }).then(async(product) => {\n-        const { quantityBought, quantityLeft } = req.body;\n+        const { name, quantityBought, quantityLeft } = req.body;\n         try {\n             await Product.updateOne({ _id: req.params.id }, {\n+                name,\n                 quantityBought: product.quantityBought + quantityBought,\n                 quantityLeft: product.quantityLeft - quantityBought,\n                 dateModified: Date.now()\n             }).then(() => {\n"
                },
                {
                    "date": 1641109869363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,9 @@\n         const { name, quantityBought, quantityLeft } = req.body;\n         try {\n             await Product.updateOne({ _id: req.params.id }, {\n                 name,\n-                quantityBought: product.quantityBought + quantityBought,\n+                quantityBought: product.quantityBought + quantityBought || 0,\n                 quantityLeft: product.quantityLeft - quantityBought,\n                 dateModified: Date.now()\n             }).then(() => {\n                 Product.findOne({ _id: req.params.id }).then((product) => {\n"
                },
                {
                    "date": 1641109889608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,9 @@\n         try {\n             await Product.updateOne({ _id: req.params.id }, {\n                 name,\n                 quantityBought: product.quantityBought + quantityBought || 0,\n-                quantityLeft: product.quantityLeft - quantityBought,\n+                quantityLeft: product.quantityLeft - quantityBought || 0,\n                 dateModified: Date.now()\n             }).then(() => {\n                 Product.findOne({ _id: req.params.id }).then((product) => {\n                     res.status(200).json({ product });\n"
                },
                {
                    "date": 1641109941588,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,9 @@\n         try {\n             await Product.updateOne({ _id: req.params.id }, {\n                 name,\n                 quantityBought: product.quantityBought + quantityBought || 0,\n-                quantityLeft: product.quantityLeft - quantityBought || 0,\n+                quantityLeft: product.quantityLeft - quantityBought || product.quantityStocked,\n                 dateModified: Date.now()\n             }).then(() => {\n                 Product.findOne({ _id: req.params.id }).then((product) => {\n                     res.status(200).json({ product });\n"
                },
                {
                    "date": 1641110078671,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,8 +53,11 @@\n }\n \n module.exports.stock_update = (req, res) => {\n     Product.findById({ _id: req.params.id }).then(async(product) => {\n+        if (product.quantityLeft === 0) {\n+            console.error('Error, no products left');\n+        }\n         const { name, quantityBought, quantityLeft } = req.body;\n         try {\n             await Product.updateOne({ _id: req.params.id }, {\n                 name,\n"
                },
                {
                    "date": 1641110110142,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,8 +55,9 @@\n module.exports.stock_update = (req, res) => {\n     Product.findById({ _id: req.params.id }).then(async(product) => {\n         if (product.quantityLeft === 0) {\n             console.error('Error, no products left');\n+            res.status(401).json({ error: 'Error, no products left' });\n         }\n         const { name, quantityBought, quantityLeft } = req.body;\n         try {\n             await Product.updateOne({ _id: req.params.id }, {\n"
                },
                {
                    "date": 1641110256473,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,13 +53,16 @@\n }\n \n module.exports.stock_update = (req, res) => {\n     Product.findById({ _id: req.params.id }).then(async(product) => {\n+        const { name, quantityBought, quantityLeft } = req.body;\n         if (product.quantityLeft === 0) {\n             console.error('Error, no products left');\n             res.status(401).json({ error: 'Error, no products left' });\n+        } else if (quantityBought > product.quantityLeft) {\n+            res.status(401).json({ error: 'Error, you cannot sell more than what is left in your inventory' });\n         }\n-        const { name, quantityBought, quantityLeft } = req.body;\n+\n         try {\n             await Product.updateOne({ _id: req.params.id }, {\n                 name,\n                 quantityBought: product.quantityBought + quantityBought || 0,\n"
                },
                {
                    "date": 1641110304729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,9 @@\n         if (product.quantityLeft === 0) {\n             console.error('Error, no products left');\n             res.status(401).json({ error: 'Error, no products left' });\n         } else if (quantityBought > product.quantityLeft) {\n-            res.status(401).json({ error: 'Error, you cannot sell more than what is left in your inventory' });\n+            res.json({ error: 'Error, you cannot sell more than what is left in your inventory' });\n         }\n \n         try {\n             await Product.updateOne({ _id: req.params.id }, {\n"
                },
                {
                    "date": 1641110317229,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,9 @@\n         if (product.quantityLeft === 0) {\n             console.error('Error, no products left');\n             res.status(401).json({ error: 'Error, no products left' });\n         } else if (quantityBought > product.quantityLeft) {\n-            res.json({ error: 'Error, you cannot sell more than what is left in your inventory' });\n+            res.status(401).json({ error: 'Error, you cannot sell more than what is left in your inventory' });\n         }\n \n         try {\n             await Product.updateOne({ _id: req.params.id }, {\n"
                },
                {
                    "date": 1641110358160,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,11 @@\n                 quantityLeft: product.quantityLeft - quantityBought || product.quantityStocked,\n                 dateModified: Date.now()\n             }).then(() => {\n                 Product.findOne({ _id: req.params.id }).then((product) => {\n-                    res.status(200).json({ product });\n+                    if (product) {\n+                        res.status(200).json({ product });\n+                    }\n                 });\n             });\n \n         } catch (error) {\n"
                },
                {
                    "date": 1641110403937,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,26 +59,25 @@\n             console.error('Error, no products left');\n             res.status(401).json({ error: 'Error, no products left' });\n         } else if (quantityBought > product.quantityLeft) {\n             res.status(401).json({ error: 'Error, you cannot sell more than what is left in your inventory' });\n-        }\n-\n-        try {\n-            await Product.updateOne({ _id: req.params.id }, {\n-                name,\n-                quantityBought: product.quantityBought + quantityBought || 0,\n-                quantityLeft: product.quantityLeft - quantityBought || product.quantityStocked,\n-                dateModified: Date.now()\n-            }).then(() => {\n-                Product.findOne({ _id: req.params.id }).then((product) => {\n-                    if (product) {\n+        } else {\n+            const { name, quantityBought, quantityLeft } = req.body;\n+            try {\n+                await Product.updateOne({ _id: req.params.id }, {\n+                    name,\n+                    quantityBought: product.quantityBought + quantityBought || 0,\n+                    quantityLeft: product.quantityLeft - quantityBought || product.quantityStocked,\n+                    dateModified: Date.now()\n+                }).then(() => {\n+                    Product.findOne({ _id: req.params.id }).then((product) => {\n                         res.status(200).json({ product });\n-                    }\n+                    });\n                 });\n-            });\n \n-        } catch (error) {\n-            res.status(400).json({ error: error });\n+            } catch (error) {\n+                res.status(400).json({ error: error });\n+            }\n         }\n     });\n \n     const qtyStocked = Product.findById({ _id: req.params.id });\n"
                },
                {
                    "date": 1641110433699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,17 +52,18 @@\n     }\n }\n \n module.exports.stock_update = (req, res) => {\n+    const { name, quantityBought, quantityLeft } = req.body;\n     Product.findById({ _id: req.params.id }).then(async(product) => {\n-        const { name, quantityBought, quantityLeft } = req.body;\n+        // const { name, quantityBought, quantityLeft } = req.body;\n         if (product.quantityLeft === 0) {\n             console.error('Error, no products left');\n             res.status(401).json({ error: 'Error, no products left' });\n         } else if (quantityBought > product.quantityLeft) {\n             res.status(401).json({ error: 'Error, you cannot sell more than what is left in your inventory' });\n         } else {\n-            const { name, quantityBought, quantityLeft } = req.body;\n+\n             try {\n                 await Product.updateOne({ _id: req.params.id }, {\n                     name,\n                     quantityBought: product.quantityBought + quantityBought || 0,\n"
                },
                {
                    "date": 1641110500020,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n         if (product.quantityLeft === 0) {\n             console.error('Error, no products left');\n             res.status(401).json({ error: 'Error, no products left' });\n         } else if (quantityBought > product.quantityLeft) {\n-            res.status(401).json({ error: 'Error, you cannot sell more than what is left in your inventory' });\n+            res.status(401).json({ error: `Error, your inventory is left with ${product.quantityLeft}, so you cannot sell more than what is left in your inventory` });\n         } else {\n \n             try {\n                 await Product.updateOne({ _id: req.params.id }, {\n"
                },
                {
                    "date": 1641110512058,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,11 @@\n         if (product.quantityLeft === 0) {\n             console.error('Error, no products left');\n             res.status(401).json({ error: 'Error, no products left' });\n         } else if (quantityBought > product.quantityLeft) {\n-            res.status(401).json({ error: `Error, your inventory is left with ${product.quantityLeft}, so you cannot sell more than what is left in your inventory` });\n+            res.status(401).json({\n+                error: `Error, your inventory is left with ${product.quantityLeft}, so you cannot sell more than what is left in your inventory`\n+            });\n         } else {\n \n             try {\n                 await Product.updateOne({ _id: req.params.id }, {\n"
                },
                {
                    "date": 1641110616015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n             console.error('Error, no products left');\n             res.status(401).json({ error: 'Error, no products left' });\n         } else if (quantityBought > product.quantityLeft) {\n             res.status(401).json({\n-                error: `Error, your inventory is left with ${product.quantityLeft}, so you cannot sell more than what is left in your inventory`\n+                error: `Error, your inventory is left with ${product.quantityLeft} units, so you cannot sell more than what is left in your inventory`\n             });\n         } else {\n \n             try {\n"
                },
                {
                    "date": 1641110656794,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n             console.error('Error, no products left');\n             res.status(401).json({ error: 'Error, no products left' });\n         } else if (quantityBought > product.quantityLeft) {\n             res.status(401).json({\n-                error: `Error, your inventory is left with ${product.quantityLeft} units, so you cannot sell more than what is left in your inventory`\n+                error: `Error, your inventory is left with ${product.quantityLeft} units, so you cannot sell ${quantityBought} which is more than what is left in your inventory`\n             });\n         } else {\n \n             try {\n"
                },
                {
                    "date": 1641110669676,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n             console.error('Error, no products left');\n             res.status(401).json({ error: 'Error, no products left' });\n         } else if (quantityBought > product.quantityLeft) {\n             res.status(401).json({\n-                error: `Error, your inventory is left with ${product.quantityLeft} units, so you cannot sell ${quantityBought} which is more than what is left in your inventory`\n+                error: `Error, your inventory is left with ${product.quantityLeft} units, so you cannot sell ${quantityBought} units which is more than what is left in your inventory`\n             });\n         } else {\n \n             try {\n"
                },
                {
                    "date": 1641110742449,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,10 @@\n             console.error('Error, no products left');\n             res.status(401).json({ error: 'Error, no products left' });\n         } else if (quantityBought > product.quantityLeft) {\n             res.status(401).json({\n-                error: `Error, your inventory is left with ${product.quantityLeft} units, so you cannot sell ${quantityBought} units which is more than what is left in your inventory`\n+                error: `Error, your inventory is left with ${product.quantityLeft} units, so you cannot sell ${quantityBought}\n+                 units which is ${quantityBought - product.quantityLeft} more than what is left in your inventory`\n             });\n         } else {\n \n             try {\n"
                },
                {
                    "date": 1641110771549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,10 +60,9 @@\n             console.error('Error, no products left');\n             res.status(401).json({ error: 'Error, no products left' });\n         } else if (quantityBought > product.quantityLeft) {\n             res.status(401).json({\n-                error: `Error, your inventory is left with ${product.quantityLeft} units, so you cannot sell ${quantityBought}\n-                 units which is ${quantityBought - product.quantityLeft} more than what is left in your inventory`\n+                error: `Error, your inventory is left with ${product.quantityLeft} units, so you cannot sell ${quantityBought} units which is ${quantityBought - product.quantityLeft} more than what is left in your inventory`\n             });\n         } else {\n \n             try {\n"
                },
                {
                    "date": 1641110788488,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n             console.error('Error, no products left');\n             res.status(401).json({ error: 'Error, no products left' });\n         } else if (quantityBought > product.quantityLeft) {\n             res.status(401).json({\n-                error: `Error, your inventory is left with ${product.quantityLeft} units, so you cannot sell ${quantityBought} units which is ${quantityBought - product.quantityLeft} more than what is left in your inventory`\n+                error: `Error, your inventory is left with ${product.quantityLeft} units, so you cannot sell ${quantityBought} units which is ${quantityBought - product.quantityLeft} units more than what is left in your inventory`\n             });\n         } else {\n \n             try {\n"
                },
                {
                    "date": 1641110873599,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,8 @@\n             res.status(401).json({\n                 error: `Error, your inventory is left with ${product.quantityLeft} units, so you cannot sell ${quantityBought} units which is ${quantityBought - product.quantityLeft} units more than what is left in your inventory`\n             });\n         } else {\n-\n             try {\n                 await Product.updateOne({ _id: req.params.id }, {\n                     name,\n                     quantityBought: product.quantityBought + quantityBought || 0,\n"
                },
                {
                    "date": 1641110890511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,18 +74,13 @@\n                     Product.findOne({ _id: req.params.id }).then((product) => {\n                         res.status(200).json({ product });\n                     });\n                 });\n-\n             } catch (error) {\n                 res.status(400).json({ error: error });\n             }\n         }\n     });\n-\n-    const qtyStocked = Product.findById({ _id: req.params.id });\n-    let total = qtyStocked.quantityStocked - qtyStocked.quantityBought;\n-\n }\n \n module.exports.stock_delete = async(req, res) => {\n     try {\n"
                },
                {
                    "date": 1641110908564,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,35 +1,7 @@\n const Product = require('../models/Product');\n \n-// Handle errors\n-const handleErrors = (err) => {\n-    console.log(err.message, err.code);\n-    let errors = { productLeft: '' };\n \n-    // Duplicate error code\n-    if (err.code === 11000) {\n-        errors.email = 'that email is already in use';\n-        return errors;\n-    }\n-\n-    if (err.message === 'incorrect email') {\n-        errors.email = 'that email is not registered';\n-    }\n-\n-    if (err.message === 'incorrect password') {\n-        errors.password = 'that password is incorrect';\n-    }\n-\n-    // Validation errors\n-    if (err.message.includes('user validation failed')) {\n-        Object.values(err.errors).forEach(({ properties }) => {\n-            errors[properties.path] = properties.message;\n-        });\n-    }\n-    return errors;\n-}\n-\n-\n module.exports.stocks_get = (req, res) => {\n     Product.find({}, (err, products) => {\n         res.status(200).json({ products });\n     });\n"
                },
                {
                    "date": 1641110986610,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,11 @@\n \n \n module.exports.stocks_get = (req, res) => {\n     Product.find({}, (err, products) => {\n+        if (err) {\n+            res.status(400).json({ error: 'no product found' });\n+        }\n         res.status(200).json({ products });\n     });\n }\n \n"
                },
                {
                    "date": 1641111033550,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n             });\n         } else {\n             try {\n                 await Product.updateOne({ _id: req.params.id }, {\n-                    name,\n+                    name: name || product.name,\n                     quantityBought: product.quantityBought + quantityBought || 0,\n                     quantityLeft: product.quantityLeft - quantityBought || product.quantityStocked,\n                     dateModified: Date.now()\n                 }).then(() => {\n"
                },
                {
                    "date": 1641111127371,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,8 @@\n \n module.exports.stock_update = (req, res) => {\n     const { name, quantityBought, quantityLeft } = req.body;\n     Product.findById({ _id: req.params.id }).then(async(product) => {\n-        // const { name, quantityBought, quantityLeft } = req.body;\n         if (product.quantityLeft === 0) {\n             console.error('Error, no products left');\n             res.status(401).json({ error: 'Error, no products left' });\n         } else if (quantityBought > product.quantityLeft) {\n"
                },
                {
                    "date": 1641111158636,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,8 @@\n \n module.exports.stocks_get_by_id = (req, res) => {\n     Product.findById({ _id: req.params.id }).then((product) => {\n         res.status(200).json({ product });\n-        console.log(product.quantityStocked - 34.9);\n     });\n }\n \n module.exports.stocks_post = async(req, res) => {\n"
                },
                {
                    "date": 1641111316422,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,11 +29,15 @@\n module.exports.stock_update = (req, res) => {\n     const { name, quantityBought, quantityLeft } = req.body;\n     Product.findById({ _id: req.params.id }).then(async(product) => {\n         if (product.quantityLeft === 0) {\n+            /* first check if quantity left in the database hasn't been \n+            depleted and raise unauthorized error */\n             console.error('Error, no products left');\n             res.status(401).json({ error: 'Error, no products left' });\n         } else if (quantityBought > product.quantityLeft) {\n+            /* Also check if user is trying to sell more than\n+            what is left in the database and raise an unauthorized error */\n             res.status(401).json({\n                 error: `Error, your inventory is left with ${product.quantityLeft} units, so you cannot sell ${quantityBought} units which is ${quantityBought - product.quantityLeft} units more than what is left in your inventory`\n             });\n         } else {\n"
                },
                {
                    "date": 1641111357835,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,8 +40,9 @@\n             res.status(401).json({\n                 error: `Error, your inventory is left with ${product.quantityLeft} units, so you cannot sell ${quantityBought} units which is ${quantityBought - product.quantityLeft} units more than what is left in your inventory`\n             });\n         } else {\n+            /* if the above conditions evaluates to false, then continue with the operation*/\n             try {\n                 await Product.updateOne({ _id: req.params.id }, {\n                     name: name || product.name,\n                     quantityBought: product.quantityBought + quantityBought || 0,\n"
                },
                {
                    "date": 1641111411812,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n             res.status(401).json({\n                 error: `Error, your inventory is left with ${product.quantityLeft} units, so you cannot sell ${quantityBought} units which is ${quantityBought - product.quantityLeft} units more than what is left in your inventory`\n             });\n         } else {\n-            /* if the above conditions evaluates to false, then continue with the operation*/\n+            /* if the above conditions evaluates to false, then continue with the operation */\n             try {\n                 await Product.updateOne({ _id: req.params.id }, {\n                     name: name || product.name,\n                     quantityBought: product.quantityBought + quantityBought || 0,\n"
                },
                {
                    "date": 1641111457562,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,10 @@\n             res.status(401).json({\n                 error: `Error, your inventory is left with ${product.quantityLeft} units, so you cannot sell ${quantityBought} units which is ${quantityBought - product.quantityLeft} units more than what is left in your inventory`\n             });\n         } else {\n-            /* if the above conditions evaluates to false, then continue with the operation */\n+            /* if the above conditions evaluates to false, \n+            then continue with the operation */\n             try {\n                 await Product.updateOne({ _id: req.params.id }, {\n                     name: name || product.name,\n                     quantityBought: product.quantityBought + quantityBought || 0,\n@@ -60,8 +61,9 @@\n     });\n }\n \n module.exports.stock_delete = async(req, res) => {\n+    // Delete operation on the product\n     try {\n         const product = await Product.deleteOne({ _id: req.params.id });\n         res.status(202).json({ product: product.name });\n     } catch (error) {\n"
                },
                {
                    "date": 1641111473896,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,9 @@\n     });\n }\n \n module.exports.stocks_post = async(req, res) => {\n+    // create a product\n     const { name, quantityStocked, quantityLeft } = req.body;\n     try {\n         const product = await Product.create({ name, quantityStocked, quantityLeft: quantityStocked });\n         res.status(201).json({ product });\n"
                },
                {
                    "date": 1641112571230,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,10 @@\n const Product = require('../models/Product');\n+const jwt = require('jsonwebtoken');\n \n \n module.exports.stocks_get = (req, res) => {\n+    console.log(jwt.decode(req.cookies.jwt).id);\n     Product.find({}, (err, products) => {\n         if (err) {\n             res.status(400).json({ error: 'no product found' });\n         }\n"
                },
                {
                    "date": 1641112691025,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n const jwt = require('jsonwebtoken');\n \n \n module.exports.stocks_get = (req, res) => {\n-    console.log(jwt.decode(req.cookies.jwt).id);\n+\n     Product.find({}, (err, products) => {\n         if (err) {\n             res.status(400).json({ error: 'no product found' });\n         }\n@@ -19,11 +19,16 @@\n }\n \n module.exports.stocks_post = async(req, res) => {\n     // create a product\n-    const { name, quantityStocked, quantityLeft } = req.body;\n+    const { owner, name, quantityStocked, quantityLeft } = req.body;\n     try {\n-        const product = await Product.create({ name, quantityStocked, quantityLeft: quantityStocked });\n+        const product = await Product.create({\n+            owner: jwt.decode(req.cookies.jwt).id,\n+            name,\n+            quantityStocked,\n+            quantityLeft: quantityStocked\n+        });\n         res.status(201).json({ product });\n     } catch (error) {\n         res.status(400).json({ error });\n     }\n"
                },
                {
                    "date": 1641112713192,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n }\n \n module.exports.stocks_post = async(req, res) => {\n     // create a product\n-    const { owner, name, quantityStocked, quantityLeft } = req.body;\n+    const { name, quantityStocked } = req.body;\n     try {\n         const product = await Product.create({\n             owner: jwt.decode(req.cookies.jwt).id,\n             name,\n@@ -34,9 +34,9 @@\n     }\n }\n \n module.exports.stock_update = (req, res) => {\n-    const { name, quantityBought, quantityLeft } = req.body;\n+    const { name, quantityBought } = req.body;\n     Product.findById({ _id: req.params.id }).then(async(product) => {\n         if (product.quantityLeft === 0) {\n             /* first check if quantity left in the database hasn't been \n             depleted and raise unauthorized error */\n"
                },
                {
                    "date": 1641112927250,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n \n \n module.exports.stocks_get = (req, res) => {\n \n-    Product.find({}, (err, products) => {\n+    Product.find({ owner: jwt.decode(req.cookies.jwt).id }, (err, products) => {\n         if (err) {\n             res.status(400).json({ error: 'no product found' });\n         }\n         res.status(200).json({ products });\n"
                },
                {
                    "date": 1641114714134,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n \n \n module.exports.stocks_get = (req, res) => {\n \n-    Product.find({ owner: jwt.decode(req.cookies.jwt).id }, (err, products) => {\n+    Product.find({ owner: jwt.decode(req.cookies.jwt).id || '' }), (err, products) => {\n         if (err) {\n             res.status(400).json({ error: 'no product found' });\n         }\n         res.status(200).json({ products });\n"
                },
                {
                    "date": 1641114731517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n \n \n module.exports.stocks_get = (req, res) => {\n \n-    Product.find({ owner: jwt.decode(req.cookies.jwt).id || '' }), (err, products) => {\n+    Product.find({ owner: jwt.decode(req.cookies.jwt).id }, (err, products) => {\n         if (err) {\n             res.status(400).json({ error: 'no product found' });\n         }\n         res.status(200).json({ products });\n"
                },
                {
                    "date": 1641114765149,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,14 +3,17 @@\n \n \n module.exports.stocks_get = (req, res) => {\n \n-    Product.find({ owner: jwt.decode(req.cookies.jwt).id }, (err, products) => {\n-        if (err) {\n-            res.status(400).json({ error: 'no product found' });\n-        }\n-        res.status(200).json({ products });\n-    });\n+    if (jwt.decode(req.cookies.jwt).id) {\n+        Product.find({ owner: jwt.decode(req.cookies.jwt).id }, (err, products) => {\n+            if (err) {\n+                res.status(400).json({ error: 'no product found' });\n+            }\n+            res.status(200).json({ products });\n+        });\n+    }\n+\n }\n \n module.exports.stocks_get_by_id = (req, res) => {\n     Product.findById({ _id: req.params.id }).then((product) => {\n"
                },
                {
                    "date": 1641114816787,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,10 @@\n                 res.status(400).json({ error: 'no product found' });\n             }\n             res.status(200).json({ products });\n         });\n+    } else {\n+        res.status(401).json({ error: 'You need to be authenticated to get access to this' })\n     }\n \n }\n \n"
                },
                {
                    "date": 1641114869083,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,17 +3,17 @@\n \n \n module.exports.stocks_get = (req, res) => {\n \n-    if (jwt.decode(req.cookies.jwt).id) {\n+    if (!jwt.decode(req.cookies.jwt).id == null) {\n         Product.find({ owner: jwt.decode(req.cookies.jwt).id }, (err, products) => {\n             if (err) {\n                 res.status(400).json({ error: 'no product found' });\n             }\n             res.status(200).json({ products });\n         });\n     } else {\n-        res.status(401).json({ error: 'You need to be authenticated to get access to this' })\n+        res.status(401).json({ error: 'You need to be authenticated to get access to this' });\n     }\n \n }\n \n"
                },
                {
                    "date": 1641114913637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n \n \n module.exports.stocks_get = (req, res) => {\n \n-    if (!jwt.decode(req.cookies.jwt).id == null) {\n+    if (!jwt.decode(req.cookies.jwt) == null) {\n         Product.find({ owner: jwt.decode(req.cookies.jwt).id }, (err, products) => {\n             if (err) {\n                 res.status(400).json({ error: 'no product found' });\n             }\n"
                },
                {
                    "date": 1641114959079,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,11 +17,13 @@\n \n }\n \n module.exports.stocks_get_by_id = (req, res) => {\n-    Product.findById({ _id: req.params.id }).then((product) => {\n-        res.status(200).json({ product });\n-    });\n+    if (!jwt.decode(req.cookies.jwt) == null) {\n+        Product.findById({ _id: req.params.id }).then((product) => {\n+            res.status(200).json({ product });\n+        });\n+    }\n }\n \n module.exports.stocks_post = async(req, res) => {\n     // create a product\n"
                },
                {
                    "date": 1641114975966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,20 +25,22 @@\n     }\n }\n \n module.exports.stocks_post = async(req, res) => {\n-    // create a product\n-    const { name, quantityStocked } = req.body;\n-    try {\n-        const product = await Product.create({\n-            owner: jwt.decode(req.cookies.jwt).id,\n-            name,\n-            quantityStocked,\n-            quantityLeft: quantityStocked\n-        });\n-        res.status(201).json({ product });\n-    } catch (error) {\n-        res.status(400).json({ error });\n+    if (!jwt.decode(req.cookies.jwt) == null) {\n+        // create a product\n+        const { name, quantityStocked } = req.body;\n+        try {\n+            const product = await Product.create({\n+                owner: jwt.decode(req.cookies.jwt).id,\n+                name,\n+                quantityStocked,\n+                quantityLeft: quantityStocked\n+            });\n+            res.status(201).json({ product });\n+        } catch (error) {\n+            res.status(400).json({ error });\n+        }\n     }\n }\n \n module.exports.stock_update = (req, res) => {\n"
                },
                {
                    "date": 1641114985915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,40 +43,42 @@\n     }\n }\n \n module.exports.stock_update = (req, res) => {\n-    const { name, quantityBought } = req.body;\n-    Product.findById({ _id: req.params.id }).then(async(product) => {\n-        if (product.quantityLeft === 0) {\n-            /* first check if quantity left in the database hasn't been \n-            depleted and raise unauthorized error */\n-            console.error('Error, no products left');\n-            res.status(401).json({ error: 'Error, no products left' });\n-        } else if (quantityBought > product.quantityLeft) {\n-            /* Also check if user is trying to sell more than\n-            what is left in the database and raise an unauthorized error */\n-            res.status(401).json({\n-                error: `Error, your inventory is left with ${product.quantityLeft} units, so you cannot sell ${quantityBought} units which is ${quantityBought - product.quantityLeft} units more than what is left in your inventory`\n-            });\n-        } else {\n-            /* if the above conditions evaluates to false, \n-            then continue with the operation */\n-            try {\n-                await Product.updateOne({ _id: req.params.id }, {\n-                    name: name || product.name,\n-                    quantityBought: product.quantityBought + quantityBought || 0,\n-                    quantityLeft: product.quantityLeft - quantityBought || product.quantityStocked,\n-                    dateModified: Date.now()\n-                }).then(() => {\n-                    Product.findOne({ _id: req.params.id }).then((product) => {\n-                        res.status(200).json({ product });\n+    if (!jwt.decode(req.cookies.jwt) == null) {\n+        const { name, quantityBought } = req.body;\n+        Product.findById({ _id: req.params.id }).then(async(product) => {\n+            if (product.quantityLeft === 0) {\n+                /* first check if quantity left in the database hasn't been \n+                depleted and raise unauthorized error */\n+                console.error('Error, no products left');\n+                res.status(401).json({ error: 'Error, no products left' });\n+            } else if (quantityBought > product.quantityLeft) {\n+                /* Also check if user is trying to sell more than\n+                what is left in the database and raise an unauthorized error */\n+                res.status(401).json({\n+                    error: `Error, your inventory is left with ${product.quantityLeft} units, so you cannot sell ${quantityBought} units which is ${quantityBought - product.quantityLeft} units more than what is left in your inventory`\n+                });\n+            } else {\n+                /* if the above conditions evaluates to false, \n+                then continue with the operation */\n+                try {\n+                    await Product.updateOne({ _id: req.params.id }, {\n+                        name: name || product.name,\n+                        quantityBought: product.quantityBought + quantityBought || 0,\n+                        quantityLeft: product.quantityLeft - quantityBought || product.quantityStocked,\n+                        dateModified: Date.now()\n+                    }).then(() => {\n+                        Product.findOne({ _id: req.params.id }).then((product) => {\n+                            res.status(200).json({ product });\n+                        });\n                     });\n-                });\n-            } catch (error) {\n-                res.status(400).json({ error: error });\n+                } catch (error) {\n+                    res.status(400).json({ error: error });\n+                }\n             }\n-        }\n-    });\n+        });\n+    }\n }\n \n module.exports.stock_delete = async(req, res) => {\n     // Delete operation on the product\n"
                },
                {
                    "date": 1641114996709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,12 +80,14 @@\n     }\n }\n \n module.exports.stock_delete = async(req, res) => {\n-    // Delete operation on the product\n-    try {\n-        const product = await Product.deleteOne({ _id: req.params.id });\n-        res.status(202).json({ product: product.name });\n-    } catch (error) {\n+    if (!jwt.decode(req.cookies.jwt) == null) {\n+        // Delete operation on the product\n+        try {\n+            const product = await Product.deleteOne({ _id: req.params.id });\n+            res.status(202).json({ product: product.name });\n+        } catch (error) {\n \n+        }\n     }\n }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1641107897960,
            "name": "Commit-0",
            "content": "const Product = require('../models/Product');\n\nfunction calculateLeft(stocked, bought) {\n    return (stocked - bought);\n}\n\n\nmodule.exports.stocks_get = (req, res) => {\n    Product.find({}, (err, products) => {\n        res.status(200).json({ products });\n    });\n}\n\nmodule.exports.stocks_get_by_id = (req, res) => {\n    Product.findById({ _id: req.params.id }).then((product) => {\n        res.status(200).json({ product });\n        console.log(product);\n    });\n}\n\nmodule.exports.stocks_post = async(req, res) => {\n    const { name, quantityStocked, quantityLeft } = req.body;\n    try {\n        const product = await Product.create({ name, quantityStocked, quantityLeft: quantityStocked });\n        res.status(201).json({ product });\n    } catch (error) {\n        res.status(400).json({ error });\n    }\n}\n\nmodule.exports.stock_update = async(req, res) => {\n    const { quantityBought, quantityLeft } = req.body;\n    // if (quantityBought < req.body.quantityStocked) {\n\n    // }\n    const qtyStocked = Product.findById({ _id: req.params.id });\n    let total = qtyStocked.quantityStocked - qtyStocked.quantityBought;\n    try {\n        await Product.updateOne({ _id: req.params.id }, {\n            quantityBought: quantityBought,\n            quantityLeft: total,\n            dateModified: Date.now()\n        }).then(() => {\n            Product.findOne({ _id: req.params.id }).then((product) => {\n                res.status(200).json({ product });\n            });\n        });\n\n    } catch (error) {\n        res.status(400).json({ error: error });\n    }\n}\n\nmodule.exports.stock_delete = async(req, res) => {\n    try {\n        const product = await Product.deleteOne({ _id: req.params.id });\n        res.status(202).json({ product: product.name });\n    } catch (error) {\n\n    }\n}"
        }
    ]
}